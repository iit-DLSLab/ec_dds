// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ecat_robot_state.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ecat_robot_state.h"
#include "ecat_robot_stateTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define EcatRobotStateMsg_max_cdr_typesize 4840ULL;
#define EcatRobotStateMsg_max_key_cdr_typesize 0ULL;

EcatRobotStateMsg::EcatRobotStateMsg()
{
    // string m_frame_id
    m_frame_id ="";
    // unsigned long m_sequence_id
    m_sequence_id = 0;
    // double m_timestamp
    m_timestamp = 0.0;
    // string m_robot_name
    m_robot_name ="";
    // string m_joints_name

    // double m_joints_temperature
    memset(&m_joints_temperature, 0, (12) * 8);
    // double m_joints_position
    memset(&m_joints_position, 0, (12) * 8);
    // double m_joints_velocity
    memset(&m_joints_velocity, 0, (12) * 8);
    // double m_joints_acceleration
    memset(&m_joints_acceleration, 0, (12) * 8);
    // double m_joints_torques
    memset(&m_joints_torques, 0, (12) * 8);
    // double m_preassure1
    memset(&m_preassure1, 0, (12) * 8);
    // double m_preassure2
    memset(&m_preassure2, 0, (12) * 8);
    // double m_feet_contact
    memset(&m_feet_contact, 0, (4) * 8);
    // double m_feet_position
    memset(&m_feet_position, 0, (12) * 8);
    // double m_current_ref
    memset(&m_current_ref, 0, (12) * 8);
    // double m_position_ref
    memset(&m_position_ref, 0, (12) * 8);
    // double m_torque_ref
    memset(&m_torque_ref, 0, (12) * 8);
    // double m_current_offset
    memset(&m_current_offset, 0, (12) * 8);

    // Just to register all known types
    registerecat_robot_stateTypes();
}

EcatRobotStateMsg::~EcatRobotStateMsg()
{


















}

EcatRobotStateMsg::EcatRobotStateMsg(
        const EcatRobotStateMsg& x)
{
    m_frame_id = x.m_frame_id;
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_robot_name = x.m_robot_name;
    m_joints_name = x.m_joints_name;
    m_joints_temperature = x.m_joints_temperature;
    m_joints_position = x.m_joints_position;
    m_joints_velocity = x.m_joints_velocity;
    m_joints_acceleration = x.m_joints_acceleration;
    m_joints_torques = x.m_joints_torques;
    m_preassure1 = x.m_preassure1;
    m_preassure2 = x.m_preassure2;
    m_feet_contact = x.m_feet_contact;
    m_feet_position = x.m_feet_position;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;
}

EcatRobotStateMsg::EcatRobotStateMsg(
        EcatRobotStateMsg&& x) noexcept 
{
    m_frame_id = std::move(x.m_frame_id);
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_robot_name = std::move(x.m_robot_name);
    m_joints_name = std::move(x.m_joints_name);
    m_joints_temperature = std::move(x.m_joints_temperature);
    m_joints_position = std::move(x.m_joints_position);
    m_joints_velocity = std::move(x.m_joints_velocity);
    m_joints_acceleration = std::move(x.m_joints_acceleration);
    m_joints_torques = std::move(x.m_joints_torques);
    m_preassure1 = std::move(x.m_preassure1);
    m_preassure2 = std::move(x.m_preassure2);
    m_feet_contact = std::move(x.m_feet_contact);
    m_feet_position = std::move(x.m_feet_position);
    m_current_ref = std::move(x.m_current_ref);
    m_position_ref = std::move(x.m_position_ref);
    m_torque_ref = std::move(x.m_torque_ref);
    m_current_offset = std::move(x.m_current_offset);
}

EcatRobotStateMsg& EcatRobotStateMsg::operator =(
        const EcatRobotStateMsg& x)
{

    m_frame_id = x.m_frame_id;
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_robot_name = x.m_robot_name;
    m_joints_name = x.m_joints_name;
    m_joints_temperature = x.m_joints_temperature;
    m_joints_position = x.m_joints_position;
    m_joints_velocity = x.m_joints_velocity;
    m_joints_acceleration = x.m_joints_acceleration;
    m_joints_torques = x.m_joints_torques;
    m_preassure1 = x.m_preassure1;
    m_preassure2 = x.m_preassure2;
    m_feet_contact = x.m_feet_contact;
    m_feet_position = x.m_feet_position;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;

    return *this;
}

EcatRobotStateMsg& EcatRobotStateMsg::operator =(
        EcatRobotStateMsg&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_robot_name = std::move(x.m_robot_name);
    m_joints_name = std::move(x.m_joints_name);
    m_joints_temperature = std::move(x.m_joints_temperature);
    m_joints_position = std::move(x.m_joints_position);
    m_joints_velocity = std::move(x.m_joints_velocity);
    m_joints_acceleration = std::move(x.m_joints_acceleration);
    m_joints_torques = std::move(x.m_joints_torques);
    m_preassure1 = std::move(x.m_preassure1);
    m_preassure2 = std::move(x.m_preassure2);
    m_feet_contact = std::move(x.m_feet_contact);
    m_feet_position = std::move(x.m_feet_position);
    m_current_ref = std::move(x.m_current_ref);
    m_position_ref = std::move(x.m_position_ref);
    m_torque_ref = std::move(x.m_torque_ref);
    m_current_offset = std::move(x.m_current_offset);

    return *this;
}

bool EcatRobotStateMsg::operator ==(
        const EcatRobotStateMsg& x) const
{

    return (m_frame_id == x.m_frame_id && m_sequence_id == x.m_sequence_id && m_timestamp == x.m_timestamp && m_robot_name == x.m_robot_name && m_joints_name == x.m_joints_name && m_joints_temperature == x.m_joints_temperature && m_joints_position == x.m_joints_position && m_joints_velocity == x.m_joints_velocity && m_joints_acceleration == x.m_joints_acceleration && m_joints_torques == x.m_joints_torques && m_preassure1 == x.m_preassure1 && m_preassure2 == x.m_preassure2 && m_feet_contact == x.m_feet_contact && m_feet_position == x.m_feet_position && m_current_ref == x.m_current_ref && m_position_ref == x.m_position_ref && m_torque_ref == x.m_torque_ref && m_current_offset == x.m_current_offset);
}

bool EcatRobotStateMsg::operator !=(
        const EcatRobotStateMsg& x) const
{
    return !(*this == x);
}

size_t EcatRobotStateMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return EcatRobotStateMsg_max_cdr_typesize;
}

size_t EcatRobotStateMsg::getCdrSerializedSize(
        const EcatRobotStateMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.robot_name().size() + 1;


    for(size_t a = 0; a < data.joints_name().size(); ++a)
    {
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.joints_name().at(a).size() + 1;

    }
    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((4) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void EcatRobotStateMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_frame_id.c_str();
    scdr << m_sequence_id;
    scdr << m_timestamp;
    scdr << m_robot_name.c_str();
    for (const auto& str : m_joints_name)
    {
        scdr << str.c_str();
    }


    scdr << m_joints_temperature;

    scdr << m_joints_position;

    scdr << m_joints_velocity;

    scdr << m_joints_acceleration;

    scdr << m_joints_torques;

    scdr << m_preassure1;

    scdr << m_preassure2;

    scdr << m_feet_contact;

    scdr << m_feet_position;

    scdr << m_current_ref;

    scdr << m_position_ref;

    scdr << m_torque_ref;

    scdr << m_current_offset;


}

void EcatRobotStateMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_frame_id;
    dcdr >> m_sequence_id;
    dcdr >> m_timestamp;
    dcdr >> m_robot_name;
    for (auto& str : m_joints_name)
    {
        dcdr >> str;}


    dcdr >> m_joints_temperature;

    dcdr >> m_joints_position;

    dcdr >> m_joints_velocity;

    dcdr >> m_joints_acceleration;

    dcdr >> m_joints_torques;

    dcdr >> m_preassure1;

    dcdr >> m_preassure2;

    dcdr >> m_feet_contact;

    dcdr >> m_feet_position;

    dcdr >> m_current_ref;

    dcdr >> m_position_ref;

    dcdr >> m_torque_ref;

    dcdr >> m_current_offset;

}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void EcatRobotStateMsg::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void EcatRobotStateMsg::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& EcatRobotStateMsg::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& EcatRobotStateMsg::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function sets a value in member sequence_id
 * @param _sequence_id New value for member sequence_id
 */
void EcatRobotStateMsg::sequence_id(
        uint32_t _sequence_id)
{
    m_sequence_id = _sequence_id;
}

/*!
 * @brief This function returns the value of member sequence_id
 * @return Value of member sequence_id
 */
uint32_t EcatRobotStateMsg::sequence_id() const
{
    return m_sequence_id;
}

/*!
 * @brief This function returns a reference to member sequence_id
 * @return Reference to member sequence_id
 */
uint32_t& EcatRobotStateMsg::sequence_id()
{
    return m_sequence_id;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void EcatRobotStateMsg::timestamp(
        double _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
double EcatRobotStateMsg::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
double& EcatRobotStateMsg::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member robot_name
 * @param _robot_name New value to be copied in member robot_name
 */
void EcatRobotStateMsg::robot_name(
        const std::string& _robot_name)
{
    m_robot_name = _robot_name;
}

/*!
 * @brief This function moves the value in member robot_name
 * @param _robot_name New value to be moved in member robot_name
 */
void EcatRobotStateMsg::robot_name(
        std::string&& _robot_name)
{
    m_robot_name = std::move(_robot_name);
}

/*!
 * @brief This function returns a constant reference to member robot_name
 * @return Constant reference to member robot_name
 */
const std::string& EcatRobotStateMsg::robot_name() const
{
    return m_robot_name;
}

/*!
 * @brief This function returns a reference to member robot_name
 * @return Reference to member robot_name
 */
std::string& EcatRobotStateMsg::robot_name()
{
    return m_robot_name;
}
/*!
 * @brief This function copies the value in member joints_name
 * @param _joints_name New value to be copied in member joints_name
 */
void EcatRobotStateMsg::joints_name(
        const std::array<std::string, 12>& _joints_name)
{
    m_joints_name = _joints_name;
}

/*!
 * @brief This function moves the value in member joints_name
 * @param _joints_name New value to be moved in member joints_name
 */
void EcatRobotStateMsg::joints_name(
        std::array<std::string, 12>&& _joints_name)
{
    m_joints_name = std::move(_joints_name);
}

/*!
 * @brief This function returns a constant reference to member joints_name
 * @return Constant reference to member joints_name
 */
const std::array<std::string, 12>& EcatRobotStateMsg::joints_name() const
{
    return m_joints_name;
}

/*!
 * @brief This function returns a reference to member joints_name
 * @return Reference to member joints_name
 */
std::array<std::string, 12>& EcatRobotStateMsg::joints_name()
{
    return m_joints_name;
}
/*!
 * @brief This function copies the value in member joints_temperature
 * @param _joints_temperature New value to be copied in member joints_temperature
 */
void EcatRobotStateMsg::joints_temperature(
        const std::array<double, 12>& _joints_temperature)
{
    m_joints_temperature = _joints_temperature;
}

/*!
 * @brief This function moves the value in member joints_temperature
 * @param _joints_temperature New value to be moved in member joints_temperature
 */
void EcatRobotStateMsg::joints_temperature(
        std::array<double, 12>&& _joints_temperature)
{
    m_joints_temperature = std::move(_joints_temperature);
}

/*!
 * @brief This function returns a constant reference to member joints_temperature
 * @return Constant reference to member joints_temperature
 */
const std::array<double, 12>& EcatRobotStateMsg::joints_temperature() const
{
    return m_joints_temperature;
}

/*!
 * @brief This function returns a reference to member joints_temperature
 * @return Reference to member joints_temperature
 */
std::array<double, 12>& EcatRobotStateMsg::joints_temperature()
{
    return m_joints_temperature;
}
/*!
 * @brief This function copies the value in member joints_position
 * @param _joints_position New value to be copied in member joints_position
 */
void EcatRobotStateMsg::joints_position(
        const std::array<double, 12>& _joints_position)
{
    m_joints_position = _joints_position;
}

/*!
 * @brief This function moves the value in member joints_position
 * @param _joints_position New value to be moved in member joints_position
 */
void EcatRobotStateMsg::joints_position(
        std::array<double, 12>&& _joints_position)
{
    m_joints_position = std::move(_joints_position);
}

/*!
 * @brief This function returns a constant reference to member joints_position
 * @return Constant reference to member joints_position
 */
const std::array<double, 12>& EcatRobotStateMsg::joints_position() const
{
    return m_joints_position;
}

/*!
 * @brief This function returns a reference to member joints_position
 * @return Reference to member joints_position
 */
std::array<double, 12>& EcatRobotStateMsg::joints_position()
{
    return m_joints_position;
}
/*!
 * @brief This function copies the value in member joints_velocity
 * @param _joints_velocity New value to be copied in member joints_velocity
 */
void EcatRobotStateMsg::joints_velocity(
        const std::array<double, 12>& _joints_velocity)
{
    m_joints_velocity = _joints_velocity;
}

/*!
 * @brief This function moves the value in member joints_velocity
 * @param _joints_velocity New value to be moved in member joints_velocity
 */
void EcatRobotStateMsg::joints_velocity(
        std::array<double, 12>&& _joints_velocity)
{
    m_joints_velocity = std::move(_joints_velocity);
}

/*!
 * @brief This function returns a constant reference to member joints_velocity
 * @return Constant reference to member joints_velocity
 */
const std::array<double, 12>& EcatRobotStateMsg::joints_velocity() const
{
    return m_joints_velocity;
}

/*!
 * @brief This function returns a reference to member joints_velocity
 * @return Reference to member joints_velocity
 */
std::array<double, 12>& EcatRobotStateMsg::joints_velocity()
{
    return m_joints_velocity;
}
/*!
 * @brief This function copies the value in member joints_acceleration
 * @param _joints_acceleration New value to be copied in member joints_acceleration
 */
void EcatRobotStateMsg::joints_acceleration(
        const std::array<double, 12>& _joints_acceleration)
{
    m_joints_acceleration = _joints_acceleration;
}

/*!
 * @brief This function moves the value in member joints_acceleration
 * @param _joints_acceleration New value to be moved in member joints_acceleration
 */
void EcatRobotStateMsg::joints_acceleration(
        std::array<double, 12>&& _joints_acceleration)
{
    m_joints_acceleration = std::move(_joints_acceleration);
}

/*!
 * @brief This function returns a constant reference to member joints_acceleration
 * @return Constant reference to member joints_acceleration
 */
const std::array<double, 12>& EcatRobotStateMsg::joints_acceleration() const
{
    return m_joints_acceleration;
}

/*!
 * @brief This function returns a reference to member joints_acceleration
 * @return Reference to member joints_acceleration
 */
std::array<double, 12>& EcatRobotStateMsg::joints_acceleration()
{
    return m_joints_acceleration;
}
/*!
 * @brief This function copies the value in member joints_torques
 * @param _joints_torques New value to be copied in member joints_torques
 */
void EcatRobotStateMsg::joints_torques(
        const std::array<double, 12>& _joints_torques)
{
    m_joints_torques = _joints_torques;
}

/*!
 * @brief This function moves the value in member joints_torques
 * @param _joints_torques New value to be moved in member joints_torques
 */
void EcatRobotStateMsg::joints_torques(
        std::array<double, 12>&& _joints_torques)
{
    m_joints_torques = std::move(_joints_torques);
}

/*!
 * @brief This function returns a constant reference to member joints_torques
 * @return Constant reference to member joints_torques
 */
const std::array<double, 12>& EcatRobotStateMsg::joints_torques() const
{
    return m_joints_torques;
}

/*!
 * @brief This function returns a reference to member joints_torques
 * @return Reference to member joints_torques
 */
std::array<double, 12>& EcatRobotStateMsg::joints_torques()
{
    return m_joints_torques;
}
/*!
 * @brief This function copies the value in member preassure1
 * @param _preassure1 New value to be copied in member preassure1
 */
void EcatRobotStateMsg::preassure1(
        const std::array<double, 12>& _preassure1)
{
    m_preassure1 = _preassure1;
}

/*!
 * @brief This function moves the value in member preassure1
 * @param _preassure1 New value to be moved in member preassure1
 */
void EcatRobotStateMsg::preassure1(
        std::array<double, 12>&& _preassure1)
{
    m_preassure1 = std::move(_preassure1);
}

/*!
 * @brief This function returns a constant reference to member preassure1
 * @return Constant reference to member preassure1
 */
const std::array<double, 12>& EcatRobotStateMsg::preassure1() const
{
    return m_preassure1;
}

/*!
 * @brief This function returns a reference to member preassure1
 * @return Reference to member preassure1
 */
std::array<double, 12>& EcatRobotStateMsg::preassure1()
{
    return m_preassure1;
}
/*!
 * @brief This function copies the value in member preassure2
 * @param _preassure2 New value to be copied in member preassure2
 */
void EcatRobotStateMsg::preassure2(
        const std::array<double, 12>& _preassure2)
{
    m_preassure2 = _preassure2;
}

/*!
 * @brief This function moves the value in member preassure2
 * @param _preassure2 New value to be moved in member preassure2
 */
void EcatRobotStateMsg::preassure2(
        std::array<double, 12>&& _preassure2)
{
    m_preassure2 = std::move(_preassure2);
}

/*!
 * @brief This function returns a constant reference to member preassure2
 * @return Constant reference to member preassure2
 */
const std::array<double, 12>& EcatRobotStateMsg::preassure2() const
{
    return m_preassure2;
}

/*!
 * @brief This function returns a reference to member preassure2
 * @return Reference to member preassure2
 */
std::array<double, 12>& EcatRobotStateMsg::preassure2()
{
    return m_preassure2;
}
/*!
 * @brief This function copies the value in member feet_contact
 * @param _feet_contact New value to be copied in member feet_contact
 */
void EcatRobotStateMsg::feet_contact(
        const std::array<double, 4>& _feet_contact)
{
    m_feet_contact = _feet_contact;
}

/*!
 * @brief This function moves the value in member feet_contact
 * @param _feet_contact New value to be moved in member feet_contact
 */
void EcatRobotStateMsg::feet_contact(
        std::array<double, 4>&& _feet_contact)
{
    m_feet_contact = std::move(_feet_contact);
}

/*!
 * @brief This function returns a constant reference to member feet_contact
 * @return Constant reference to member feet_contact
 */
const std::array<double, 4>& EcatRobotStateMsg::feet_contact() const
{
    return m_feet_contact;
}

/*!
 * @brief This function returns a reference to member feet_contact
 * @return Reference to member feet_contact
 */
std::array<double, 4>& EcatRobotStateMsg::feet_contact()
{
    return m_feet_contact;
}
/*!
 * @brief This function copies the value in member feet_position
 * @param _feet_position New value to be copied in member feet_position
 */
void EcatRobotStateMsg::feet_position(
        const std::array<double, 12>& _feet_position)
{
    m_feet_position = _feet_position;
}

/*!
 * @brief This function moves the value in member feet_position
 * @param _feet_position New value to be moved in member feet_position
 */
void EcatRobotStateMsg::feet_position(
        std::array<double, 12>&& _feet_position)
{
    m_feet_position = std::move(_feet_position);
}

/*!
 * @brief This function returns a constant reference to member feet_position
 * @return Constant reference to member feet_position
 */
const std::array<double, 12>& EcatRobotStateMsg::feet_position() const
{
    return m_feet_position;
}

/*!
 * @brief This function returns a reference to member feet_position
 * @return Reference to member feet_position
 */
std::array<double, 12>& EcatRobotStateMsg::feet_position()
{
    return m_feet_position;
}
/*!
 * @brief This function copies the value in member current_ref
 * @param _current_ref New value to be copied in member current_ref
 */
void EcatRobotStateMsg::current_ref(
        const std::array<double, 12>& _current_ref)
{
    m_current_ref = _current_ref;
}

/*!
 * @brief This function moves the value in member current_ref
 * @param _current_ref New value to be moved in member current_ref
 */
void EcatRobotStateMsg::current_ref(
        std::array<double, 12>&& _current_ref)
{
    m_current_ref = std::move(_current_ref);
}

/*!
 * @brief This function returns a constant reference to member current_ref
 * @return Constant reference to member current_ref
 */
const std::array<double, 12>& EcatRobotStateMsg::current_ref() const
{
    return m_current_ref;
}

/*!
 * @brief This function returns a reference to member current_ref
 * @return Reference to member current_ref
 */
std::array<double, 12>& EcatRobotStateMsg::current_ref()
{
    return m_current_ref;
}
/*!
 * @brief This function copies the value in member position_ref
 * @param _position_ref New value to be copied in member position_ref
 */
void EcatRobotStateMsg::position_ref(
        const std::array<double, 12>& _position_ref)
{
    m_position_ref = _position_ref;
}

/*!
 * @brief This function moves the value in member position_ref
 * @param _position_ref New value to be moved in member position_ref
 */
void EcatRobotStateMsg::position_ref(
        std::array<double, 12>&& _position_ref)
{
    m_position_ref = std::move(_position_ref);
}

/*!
 * @brief This function returns a constant reference to member position_ref
 * @return Constant reference to member position_ref
 */
const std::array<double, 12>& EcatRobotStateMsg::position_ref() const
{
    return m_position_ref;
}

/*!
 * @brief This function returns a reference to member position_ref
 * @return Reference to member position_ref
 */
std::array<double, 12>& EcatRobotStateMsg::position_ref()
{
    return m_position_ref;
}
/*!
 * @brief This function copies the value in member torque_ref
 * @param _torque_ref New value to be copied in member torque_ref
 */
void EcatRobotStateMsg::torque_ref(
        const std::array<double, 12>& _torque_ref)
{
    m_torque_ref = _torque_ref;
}

/*!
 * @brief This function moves the value in member torque_ref
 * @param _torque_ref New value to be moved in member torque_ref
 */
void EcatRobotStateMsg::torque_ref(
        std::array<double, 12>&& _torque_ref)
{
    m_torque_ref = std::move(_torque_ref);
}

/*!
 * @brief This function returns a constant reference to member torque_ref
 * @return Constant reference to member torque_ref
 */
const std::array<double, 12>& EcatRobotStateMsg::torque_ref() const
{
    return m_torque_ref;
}

/*!
 * @brief This function returns a reference to member torque_ref
 * @return Reference to member torque_ref
 */
std::array<double, 12>& EcatRobotStateMsg::torque_ref()
{
    return m_torque_ref;
}
/*!
 * @brief This function copies the value in member current_offset
 * @param _current_offset New value to be copied in member current_offset
 */
void EcatRobotStateMsg::current_offset(
        const std::array<double, 12>& _current_offset)
{
    m_current_offset = _current_offset;
}

/*!
 * @brief This function moves the value in member current_offset
 * @param _current_offset New value to be moved in member current_offset
 */
void EcatRobotStateMsg::current_offset(
        std::array<double, 12>&& _current_offset)
{
    m_current_offset = std::move(_current_offset);
}

/*!
 * @brief This function returns a constant reference to member current_offset
 * @return Constant reference to member current_offset
 */
const std::array<double, 12>& EcatRobotStateMsg::current_offset() const
{
    return m_current_offset;
}

/*!
 * @brief This function returns a reference to member current_offset
 * @return Reference to member current_offset
 */
std::array<double, 12>& EcatRobotStateMsg::current_offset()
{
    return m_current_offset;
}


size_t EcatRobotStateMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return EcatRobotStateMsg_max_key_cdr_typesize;
}

bool EcatRobotStateMsg::isKeyDefined()
{
    return false;
}

void EcatRobotStateMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

