// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ecat_control_ref.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ecat_control_ref.h"
#include "ecat_control_refTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define EcatControlRefMsg_max_cdr_typesize 7680ULL;
#define EcatControlRefMsg_max_key_cdr_typesize 0ULL;

EcatControlRefMsg::EcatControlRefMsg()
{
    // string m_frame_id
    m_frame_id ="";
    // unsigned long m_sequence_id
    m_sequence_id = 0;
    // double m_timestamp
    m_timestamp = 0.0;
    // double m_amplitude
    memset(&m_amplitude, 0, (12) * 8);
    // double m_frequency
    memset(&m_frequency, 0, (12) * 8);
    // double m_offset
    memset(&m_offset, 0, (12) * 8);
    // string m_traj_type

    // string m_traj_mode

    // boolean m_start_traj
    memset(&m_start_traj, 0, (12) * 1);
    // double m_max_freq
    memset(&m_max_freq, 0, (12) * 8);
    // double m_torque_scale_factor
    memset(&m_torque_scale_factor, 0, (12) * 8);
    // double m_kp_torque
    memset(&m_kp_torque, 0, (12) * 8);
    // double m_ki_torque
    memset(&m_ki_torque, 0, (12) * 8);
    // double m_kd_torque
    memset(&m_kd_torque, 0, (12) * 8);
    // double m_kp_position
    memset(&m_kp_position, 0, (12) * 8);
    // double m_ki_position
    memset(&m_ki_position, 0, (12) * 8);
    // double m_kd_position
    memset(&m_kd_position, 0, (12) * 8);
    // double m_current_offset
    memset(&m_current_offset, 0, (12) * 8);

    // Just to register all known types
    registerecat_control_refTypes();
}

EcatControlRefMsg::~EcatControlRefMsg()
{


















}

EcatControlRefMsg::EcatControlRefMsg(
        const EcatControlRefMsg& x)
{
    m_frame_id = x.m_frame_id;
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_amplitude = x.m_amplitude;
    m_frequency = x.m_frequency;
    m_offset = x.m_offset;
    m_traj_type = x.m_traj_type;
    m_traj_mode = x.m_traj_mode;
    m_start_traj = x.m_start_traj;
    m_max_freq = x.m_max_freq;
    m_torque_scale_factor = x.m_torque_scale_factor;
    m_kp_torque = x.m_kp_torque;
    m_ki_torque = x.m_ki_torque;
    m_kd_torque = x.m_kd_torque;
    m_kp_position = x.m_kp_position;
    m_ki_position = x.m_ki_position;
    m_kd_position = x.m_kd_position;
    m_current_offset = x.m_current_offset;
}

EcatControlRefMsg::EcatControlRefMsg(
        EcatControlRefMsg&& x) noexcept 
{
    m_frame_id = std::move(x.m_frame_id);
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_amplitude = std::move(x.m_amplitude);
    m_frequency = std::move(x.m_frequency);
    m_offset = std::move(x.m_offset);
    m_traj_type = std::move(x.m_traj_type);
    m_traj_mode = std::move(x.m_traj_mode);
    m_start_traj = std::move(x.m_start_traj);
    m_max_freq = std::move(x.m_max_freq);
    m_torque_scale_factor = std::move(x.m_torque_scale_factor);
    m_kp_torque = std::move(x.m_kp_torque);
    m_ki_torque = std::move(x.m_ki_torque);
    m_kd_torque = std::move(x.m_kd_torque);
    m_kp_position = std::move(x.m_kp_position);
    m_ki_position = std::move(x.m_ki_position);
    m_kd_position = std::move(x.m_kd_position);
    m_current_offset = std::move(x.m_current_offset);
}

EcatControlRefMsg& EcatControlRefMsg::operator =(
        const EcatControlRefMsg& x)
{

    m_frame_id = x.m_frame_id;
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_amplitude = x.m_amplitude;
    m_frequency = x.m_frequency;
    m_offset = x.m_offset;
    m_traj_type = x.m_traj_type;
    m_traj_mode = x.m_traj_mode;
    m_start_traj = x.m_start_traj;
    m_max_freq = x.m_max_freq;
    m_torque_scale_factor = x.m_torque_scale_factor;
    m_kp_torque = x.m_kp_torque;
    m_ki_torque = x.m_ki_torque;
    m_kd_torque = x.m_kd_torque;
    m_kp_position = x.m_kp_position;
    m_ki_position = x.m_ki_position;
    m_kd_position = x.m_kd_position;
    m_current_offset = x.m_current_offset;

    return *this;
}

EcatControlRefMsg& EcatControlRefMsg::operator =(
        EcatControlRefMsg&& x) noexcept
{

    m_frame_id = std::move(x.m_frame_id);
    m_sequence_id = x.m_sequence_id;
    m_timestamp = x.m_timestamp;
    m_amplitude = std::move(x.m_amplitude);
    m_frequency = std::move(x.m_frequency);
    m_offset = std::move(x.m_offset);
    m_traj_type = std::move(x.m_traj_type);
    m_traj_mode = std::move(x.m_traj_mode);
    m_start_traj = std::move(x.m_start_traj);
    m_max_freq = std::move(x.m_max_freq);
    m_torque_scale_factor = std::move(x.m_torque_scale_factor);
    m_kp_torque = std::move(x.m_kp_torque);
    m_ki_torque = std::move(x.m_ki_torque);
    m_kd_torque = std::move(x.m_kd_torque);
    m_kp_position = std::move(x.m_kp_position);
    m_ki_position = std::move(x.m_ki_position);
    m_kd_position = std::move(x.m_kd_position);
    m_current_offset = std::move(x.m_current_offset);

    return *this;
}

bool EcatControlRefMsg::operator ==(
        const EcatControlRefMsg& x) const
{

    return (m_frame_id == x.m_frame_id && m_sequence_id == x.m_sequence_id && m_timestamp == x.m_timestamp && m_amplitude == x.m_amplitude && m_frequency == x.m_frequency && m_offset == x.m_offset && m_traj_type == x.m_traj_type && m_traj_mode == x.m_traj_mode && m_start_traj == x.m_start_traj && m_max_freq == x.m_max_freq && m_torque_scale_factor == x.m_torque_scale_factor && m_kp_torque == x.m_kp_torque && m_ki_torque == x.m_ki_torque && m_kd_torque == x.m_kd_torque && m_kp_position == x.m_kp_position && m_ki_position == x.m_ki_position && m_kd_position == x.m_kd_position && m_current_offset == x.m_current_offset);
}

bool EcatControlRefMsg::operator !=(
        const EcatControlRefMsg& x) const
{
    return !(*this == x);
}

size_t EcatControlRefMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return EcatControlRefMsg_max_cdr_typesize;
}

size_t EcatControlRefMsg::getCdrSerializedSize(
        const EcatControlRefMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    for(size_t a = 0; a < data.traj_type().size(); ++a)
    {
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.traj_type().at(a).size() + 1;

    }

    for(size_t a = 0; a < data.traj_mode().size(); ++a)
    {
            current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.traj_mode().at(a).size() + 1;

    }
    current_alignment += ((12) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ((12) * 8) + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void EcatControlRefMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_frame_id.c_str();
    scdr << m_sequence_id;
    scdr << m_timestamp;
    scdr << m_amplitude;

    scdr << m_frequency;

    scdr << m_offset;

    for (const auto& str : m_traj_type)
    {
        scdr << str.c_str();
    }


    for (const auto& str : m_traj_mode)
    {
        scdr << str.c_str();
    }


    scdr << m_start_traj;

    scdr << m_max_freq;

    scdr << m_torque_scale_factor;

    scdr << m_kp_torque;

    scdr << m_ki_torque;

    scdr << m_kd_torque;

    scdr << m_kp_position;

    scdr << m_ki_position;

    scdr << m_kd_position;

    scdr << m_current_offset;


}

void EcatControlRefMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_frame_id;
    dcdr >> m_sequence_id;
    dcdr >> m_timestamp;
    dcdr >> m_amplitude;

    dcdr >> m_frequency;

    dcdr >> m_offset;

    for (auto& str : m_traj_type)
    {
        dcdr >> str;}


    for (auto& str : m_traj_mode)
    {
        dcdr >> str;}


    dcdr >> m_start_traj;

    dcdr >> m_max_freq;

    dcdr >> m_torque_scale_factor;

    dcdr >> m_kp_torque;

    dcdr >> m_ki_torque;

    dcdr >> m_kd_torque;

    dcdr >> m_kp_position;

    dcdr >> m_ki_position;

    dcdr >> m_kd_position;

    dcdr >> m_current_offset;

}

/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void EcatControlRefMsg::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void EcatControlRefMsg::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& EcatControlRefMsg::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& EcatControlRefMsg::frame_id()
{
    return m_frame_id;
}
/*!
 * @brief This function sets a value in member sequence_id
 * @param _sequence_id New value for member sequence_id
 */
void EcatControlRefMsg::sequence_id(
        uint32_t _sequence_id)
{
    m_sequence_id = _sequence_id;
}

/*!
 * @brief This function returns the value of member sequence_id
 * @return Value of member sequence_id
 */
uint32_t EcatControlRefMsg::sequence_id() const
{
    return m_sequence_id;
}

/*!
 * @brief This function returns a reference to member sequence_id
 * @return Reference to member sequence_id
 */
uint32_t& EcatControlRefMsg::sequence_id()
{
    return m_sequence_id;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void EcatControlRefMsg::timestamp(
        double _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
double EcatControlRefMsg::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
double& EcatControlRefMsg::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function copies the value in member amplitude
 * @param _amplitude New value to be copied in member amplitude
 */
void EcatControlRefMsg::amplitude(
        const std::array<double, 12>& _amplitude)
{
    m_amplitude = _amplitude;
}

/*!
 * @brief This function moves the value in member amplitude
 * @param _amplitude New value to be moved in member amplitude
 */
void EcatControlRefMsg::amplitude(
        std::array<double, 12>&& _amplitude)
{
    m_amplitude = std::move(_amplitude);
}

/*!
 * @brief This function returns a constant reference to member amplitude
 * @return Constant reference to member amplitude
 */
const std::array<double, 12>& EcatControlRefMsg::amplitude() const
{
    return m_amplitude;
}

/*!
 * @brief This function returns a reference to member amplitude
 * @return Reference to member amplitude
 */
std::array<double, 12>& EcatControlRefMsg::amplitude()
{
    return m_amplitude;
}
/*!
 * @brief This function copies the value in member frequency
 * @param _frequency New value to be copied in member frequency
 */
void EcatControlRefMsg::frequency(
        const std::array<double, 12>& _frequency)
{
    m_frequency = _frequency;
}

/*!
 * @brief This function moves the value in member frequency
 * @param _frequency New value to be moved in member frequency
 */
void EcatControlRefMsg::frequency(
        std::array<double, 12>&& _frequency)
{
    m_frequency = std::move(_frequency);
}

/*!
 * @brief This function returns a constant reference to member frequency
 * @return Constant reference to member frequency
 */
const std::array<double, 12>& EcatControlRefMsg::frequency() const
{
    return m_frequency;
}

/*!
 * @brief This function returns a reference to member frequency
 * @return Reference to member frequency
 */
std::array<double, 12>& EcatControlRefMsg::frequency()
{
    return m_frequency;
}
/*!
 * @brief This function copies the value in member offset
 * @param _offset New value to be copied in member offset
 */
void EcatControlRefMsg::offset(
        const std::array<double, 12>& _offset)
{
    m_offset = _offset;
}

/*!
 * @brief This function moves the value in member offset
 * @param _offset New value to be moved in member offset
 */
void EcatControlRefMsg::offset(
        std::array<double, 12>&& _offset)
{
    m_offset = std::move(_offset);
}

/*!
 * @brief This function returns a constant reference to member offset
 * @return Constant reference to member offset
 */
const std::array<double, 12>& EcatControlRefMsg::offset() const
{
    return m_offset;
}

/*!
 * @brief This function returns a reference to member offset
 * @return Reference to member offset
 */
std::array<double, 12>& EcatControlRefMsg::offset()
{
    return m_offset;
}
/*!
 * @brief This function copies the value in member traj_type
 * @param _traj_type New value to be copied in member traj_type
 */
void EcatControlRefMsg::traj_type(
        const std::array<std::string, 12>& _traj_type)
{
    m_traj_type = _traj_type;
}

/*!
 * @brief This function moves the value in member traj_type
 * @param _traj_type New value to be moved in member traj_type
 */
void EcatControlRefMsg::traj_type(
        std::array<std::string, 12>&& _traj_type)
{
    m_traj_type = std::move(_traj_type);
}

/*!
 * @brief This function returns a constant reference to member traj_type
 * @return Constant reference to member traj_type
 */
const std::array<std::string, 12>& EcatControlRefMsg::traj_type() const
{
    return m_traj_type;
}

/*!
 * @brief This function returns a reference to member traj_type
 * @return Reference to member traj_type
 */
std::array<std::string, 12>& EcatControlRefMsg::traj_type()
{
    return m_traj_type;
}
/*!
 * @brief This function copies the value in member traj_mode
 * @param _traj_mode New value to be copied in member traj_mode
 */
void EcatControlRefMsg::traj_mode(
        const std::array<std::string, 12>& _traj_mode)
{
    m_traj_mode = _traj_mode;
}

/*!
 * @brief This function moves the value in member traj_mode
 * @param _traj_mode New value to be moved in member traj_mode
 */
void EcatControlRefMsg::traj_mode(
        std::array<std::string, 12>&& _traj_mode)
{
    m_traj_mode = std::move(_traj_mode);
}

/*!
 * @brief This function returns a constant reference to member traj_mode
 * @return Constant reference to member traj_mode
 */
const std::array<std::string, 12>& EcatControlRefMsg::traj_mode() const
{
    return m_traj_mode;
}

/*!
 * @brief This function returns a reference to member traj_mode
 * @return Reference to member traj_mode
 */
std::array<std::string, 12>& EcatControlRefMsg::traj_mode()
{
    return m_traj_mode;
}
/*!
 * @brief This function copies the value in member start_traj
 * @param _start_traj New value to be copied in member start_traj
 */
void EcatControlRefMsg::start_traj(
        const std::array<bool, 12>& _start_traj)
{
    m_start_traj = _start_traj;
}

/*!
 * @brief This function moves the value in member start_traj
 * @param _start_traj New value to be moved in member start_traj
 */
void EcatControlRefMsg::start_traj(
        std::array<bool, 12>&& _start_traj)
{
    m_start_traj = std::move(_start_traj);
}

/*!
 * @brief This function returns a constant reference to member start_traj
 * @return Constant reference to member start_traj
 */
const std::array<bool, 12>& EcatControlRefMsg::start_traj() const
{
    return m_start_traj;
}

/*!
 * @brief This function returns a reference to member start_traj
 * @return Reference to member start_traj
 */
std::array<bool, 12>& EcatControlRefMsg::start_traj()
{
    return m_start_traj;
}
/*!
 * @brief This function copies the value in member max_freq
 * @param _max_freq New value to be copied in member max_freq
 */
void EcatControlRefMsg::max_freq(
        const std::array<double, 12>& _max_freq)
{
    m_max_freq = _max_freq;
}

/*!
 * @brief This function moves the value in member max_freq
 * @param _max_freq New value to be moved in member max_freq
 */
void EcatControlRefMsg::max_freq(
        std::array<double, 12>&& _max_freq)
{
    m_max_freq = std::move(_max_freq);
}

/*!
 * @brief This function returns a constant reference to member max_freq
 * @return Constant reference to member max_freq
 */
const std::array<double, 12>& EcatControlRefMsg::max_freq() const
{
    return m_max_freq;
}

/*!
 * @brief This function returns a reference to member max_freq
 * @return Reference to member max_freq
 */
std::array<double, 12>& EcatControlRefMsg::max_freq()
{
    return m_max_freq;
}
/*!
 * @brief This function copies the value in member torque_scale_factor
 * @param _torque_scale_factor New value to be copied in member torque_scale_factor
 */
void EcatControlRefMsg::torque_scale_factor(
        const std::array<double, 12>& _torque_scale_factor)
{
    m_torque_scale_factor = _torque_scale_factor;
}

/*!
 * @brief This function moves the value in member torque_scale_factor
 * @param _torque_scale_factor New value to be moved in member torque_scale_factor
 */
void EcatControlRefMsg::torque_scale_factor(
        std::array<double, 12>&& _torque_scale_factor)
{
    m_torque_scale_factor = std::move(_torque_scale_factor);
}

/*!
 * @brief This function returns a constant reference to member torque_scale_factor
 * @return Constant reference to member torque_scale_factor
 */
const std::array<double, 12>& EcatControlRefMsg::torque_scale_factor() const
{
    return m_torque_scale_factor;
}

/*!
 * @brief This function returns a reference to member torque_scale_factor
 * @return Reference to member torque_scale_factor
 */
std::array<double, 12>& EcatControlRefMsg::torque_scale_factor()
{
    return m_torque_scale_factor;
}
/*!
 * @brief This function copies the value in member kp_torque
 * @param _kp_torque New value to be copied in member kp_torque
 */
void EcatControlRefMsg::kp_torque(
        const std::array<double, 12>& _kp_torque)
{
    m_kp_torque = _kp_torque;
}

/*!
 * @brief This function moves the value in member kp_torque
 * @param _kp_torque New value to be moved in member kp_torque
 */
void EcatControlRefMsg::kp_torque(
        std::array<double, 12>&& _kp_torque)
{
    m_kp_torque = std::move(_kp_torque);
}

/*!
 * @brief This function returns a constant reference to member kp_torque
 * @return Constant reference to member kp_torque
 */
const std::array<double, 12>& EcatControlRefMsg::kp_torque() const
{
    return m_kp_torque;
}

/*!
 * @brief This function returns a reference to member kp_torque
 * @return Reference to member kp_torque
 */
std::array<double, 12>& EcatControlRefMsg::kp_torque()
{
    return m_kp_torque;
}
/*!
 * @brief This function copies the value in member ki_torque
 * @param _ki_torque New value to be copied in member ki_torque
 */
void EcatControlRefMsg::ki_torque(
        const std::array<double, 12>& _ki_torque)
{
    m_ki_torque = _ki_torque;
}

/*!
 * @brief This function moves the value in member ki_torque
 * @param _ki_torque New value to be moved in member ki_torque
 */
void EcatControlRefMsg::ki_torque(
        std::array<double, 12>&& _ki_torque)
{
    m_ki_torque = std::move(_ki_torque);
}

/*!
 * @brief This function returns a constant reference to member ki_torque
 * @return Constant reference to member ki_torque
 */
const std::array<double, 12>& EcatControlRefMsg::ki_torque() const
{
    return m_ki_torque;
}

/*!
 * @brief This function returns a reference to member ki_torque
 * @return Reference to member ki_torque
 */
std::array<double, 12>& EcatControlRefMsg::ki_torque()
{
    return m_ki_torque;
}
/*!
 * @brief This function copies the value in member kd_torque
 * @param _kd_torque New value to be copied in member kd_torque
 */
void EcatControlRefMsg::kd_torque(
        const std::array<double, 12>& _kd_torque)
{
    m_kd_torque = _kd_torque;
}

/*!
 * @brief This function moves the value in member kd_torque
 * @param _kd_torque New value to be moved in member kd_torque
 */
void EcatControlRefMsg::kd_torque(
        std::array<double, 12>&& _kd_torque)
{
    m_kd_torque = std::move(_kd_torque);
}

/*!
 * @brief This function returns a constant reference to member kd_torque
 * @return Constant reference to member kd_torque
 */
const std::array<double, 12>& EcatControlRefMsg::kd_torque() const
{
    return m_kd_torque;
}

/*!
 * @brief This function returns a reference to member kd_torque
 * @return Reference to member kd_torque
 */
std::array<double, 12>& EcatControlRefMsg::kd_torque()
{
    return m_kd_torque;
}
/*!
 * @brief This function copies the value in member kp_position
 * @param _kp_position New value to be copied in member kp_position
 */
void EcatControlRefMsg::kp_position(
        const std::array<double, 12>& _kp_position)
{
    m_kp_position = _kp_position;
}

/*!
 * @brief This function moves the value in member kp_position
 * @param _kp_position New value to be moved in member kp_position
 */
void EcatControlRefMsg::kp_position(
        std::array<double, 12>&& _kp_position)
{
    m_kp_position = std::move(_kp_position);
}

/*!
 * @brief This function returns a constant reference to member kp_position
 * @return Constant reference to member kp_position
 */
const std::array<double, 12>& EcatControlRefMsg::kp_position() const
{
    return m_kp_position;
}

/*!
 * @brief This function returns a reference to member kp_position
 * @return Reference to member kp_position
 */
std::array<double, 12>& EcatControlRefMsg::kp_position()
{
    return m_kp_position;
}
/*!
 * @brief This function copies the value in member ki_position
 * @param _ki_position New value to be copied in member ki_position
 */
void EcatControlRefMsg::ki_position(
        const std::array<double, 12>& _ki_position)
{
    m_ki_position = _ki_position;
}

/*!
 * @brief This function moves the value in member ki_position
 * @param _ki_position New value to be moved in member ki_position
 */
void EcatControlRefMsg::ki_position(
        std::array<double, 12>&& _ki_position)
{
    m_ki_position = std::move(_ki_position);
}

/*!
 * @brief This function returns a constant reference to member ki_position
 * @return Constant reference to member ki_position
 */
const std::array<double, 12>& EcatControlRefMsg::ki_position() const
{
    return m_ki_position;
}

/*!
 * @brief This function returns a reference to member ki_position
 * @return Reference to member ki_position
 */
std::array<double, 12>& EcatControlRefMsg::ki_position()
{
    return m_ki_position;
}
/*!
 * @brief This function copies the value in member kd_position
 * @param _kd_position New value to be copied in member kd_position
 */
void EcatControlRefMsg::kd_position(
        const std::array<double, 12>& _kd_position)
{
    m_kd_position = _kd_position;
}

/*!
 * @brief This function moves the value in member kd_position
 * @param _kd_position New value to be moved in member kd_position
 */
void EcatControlRefMsg::kd_position(
        std::array<double, 12>&& _kd_position)
{
    m_kd_position = std::move(_kd_position);
}

/*!
 * @brief This function returns a constant reference to member kd_position
 * @return Constant reference to member kd_position
 */
const std::array<double, 12>& EcatControlRefMsg::kd_position() const
{
    return m_kd_position;
}

/*!
 * @brief This function returns a reference to member kd_position
 * @return Reference to member kd_position
 */
std::array<double, 12>& EcatControlRefMsg::kd_position()
{
    return m_kd_position;
}
/*!
 * @brief This function copies the value in member current_offset
 * @param _current_offset New value to be copied in member current_offset
 */
void EcatControlRefMsg::current_offset(
        const std::array<double, 12>& _current_offset)
{
    m_current_offset = _current_offset;
}

/*!
 * @brief This function moves the value in member current_offset
 * @param _current_offset New value to be moved in member current_offset
 */
void EcatControlRefMsg::current_offset(
        std::array<double, 12>&& _current_offset)
{
    m_current_offset = std::move(_current_offset);
}

/*!
 * @brief This function returns a constant reference to member current_offset
 * @return Constant reference to member current_offset
 */
const std::array<double, 12>& EcatControlRefMsg::current_offset() const
{
    return m_current_offset;
}

/*!
 * @brief This function returns a reference to member current_offset
 * @return Reference to member current_offset
 */
std::array<double, 12>& EcatControlRefMsg::current_offset()
{
    return m_current_offset;
}


size_t EcatControlRefMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return EcatControlRefMsg_max_key_cdr_typesize;
}

bool EcatControlRefMsg::isKeyDefined()
{
    return false;
}

void EcatControlRefMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

