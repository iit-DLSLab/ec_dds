// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ecat_valve.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ecat_valve.h"
#include "ecat_valveTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define ECValveMsg_max_cdr_typesize 112ULL;
#define ECValveMsg_max_key_cdr_typesize 0ULL;

ECValveMsg::ECValveMsg()
{
    // double m_timestamp
    m_timestamp = 0.0;
    // unsigned long m_index
    m_index = 0;
    // unsigned long m_id
    m_id = 0;
    // double m_encoderPos
    m_encoderPos = 0.0;
    // double m_torque
    m_torque = 0.0;
    // double m_pressure1
    m_pressure1 = 0.0;
    // double m_pressure2
    m_pressure2 = 0.0;
    // double m_temp
    m_temp = 0.0;
    // double m_kp
    m_kp = 0.0;
    // double m_ki
    m_ki = 0.0;
    // double m_kd
    m_kd = 0.0;
    // double m_current_ref
    m_current_ref = 0.0;
    // double m_position_ref
    m_position_ref = 0.0;
    // double m_torque_ref
    m_torque_ref = 0.0;
    // double m_current_offset
    m_current_offset = 0.0;

    // Just to register all known types
    registerecat_valveTypes();
}

ECValveMsg::~ECValveMsg()
{















}

ECValveMsg::ECValveMsg(
        const ECValveMsg& x)
{
    m_timestamp = x.m_timestamp;
    m_index = x.m_index;
    m_id = x.m_id;
    m_encoderPos = x.m_encoderPos;
    m_torque = x.m_torque;
    m_pressure1 = x.m_pressure1;
    m_pressure2 = x.m_pressure2;
    m_temp = x.m_temp;
    m_kp = x.m_kp;
    m_ki = x.m_ki;
    m_kd = x.m_kd;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;
}

ECValveMsg::ECValveMsg(
        ECValveMsg&& x) noexcept 
{
    m_timestamp = x.m_timestamp;
    m_index = x.m_index;
    m_id = x.m_id;
    m_encoderPos = x.m_encoderPos;
    m_torque = x.m_torque;
    m_pressure1 = x.m_pressure1;
    m_pressure2 = x.m_pressure2;
    m_temp = x.m_temp;
    m_kp = x.m_kp;
    m_ki = x.m_ki;
    m_kd = x.m_kd;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;
}

ECValveMsg& ECValveMsg::operator =(
        const ECValveMsg& x)
{

    m_timestamp = x.m_timestamp;
    m_index = x.m_index;
    m_id = x.m_id;
    m_encoderPos = x.m_encoderPos;
    m_torque = x.m_torque;
    m_pressure1 = x.m_pressure1;
    m_pressure2 = x.m_pressure2;
    m_temp = x.m_temp;
    m_kp = x.m_kp;
    m_ki = x.m_ki;
    m_kd = x.m_kd;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;

    return *this;
}

ECValveMsg& ECValveMsg::operator =(
        ECValveMsg&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_index = x.m_index;
    m_id = x.m_id;
    m_encoderPos = x.m_encoderPos;
    m_torque = x.m_torque;
    m_pressure1 = x.m_pressure1;
    m_pressure2 = x.m_pressure2;
    m_temp = x.m_temp;
    m_kp = x.m_kp;
    m_ki = x.m_ki;
    m_kd = x.m_kd;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;

    return *this;
}

bool ECValveMsg::operator ==(
        const ECValveMsg& x) const
{

    return (m_timestamp == x.m_timestamp && m_index == x.m_index && m_id == x.m_id && m_encoderPos == x.m_encoderPos && m_torque == x.m_torque && m_pressure1 == x.m_pressure1 && m_pressure2 == x.m_pressure2 && m_temp == x.m_temp && m_kp == x.m_kp && m_ki == x.m_ki && m_kd == x.m_kd && m_current_ref == x.m_current_ref && m_position_ref == x.m_position_ref && m_torque_ref == x.m_torque_ref && m_current_offset == x.m_current_offset);
}

bool ECValveMsg::operator !=(
        const ECValveMsg& x) const
{
    return !(*this == x);
}

size_t ECValveMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ECValveMsg_max_cdr_typesize;
}

size_t ECValveMsg::getCdrSerializedSize(
        const ECValveMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void ECValveMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timestamp;
    scdr << m_index;
    scdr << m_id;
    scdr << m_encoderPos;
    scdr << m_torque;
    scdr << m_pressure1;
    scdr << m_pressure2;
    scdr << m_temp;
    scdr << m_kp;
    scdr << m_ki;
    scdr << m_kd;
    scdr << m_current_ref;
    scdr << m_position_ref;
    scdr << m_torque_ref;
    scdr << m_current_offset;

}

void ECValveMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_index;
    dcdr >> m_id;
    dcdr >> m_encoderPos;
    dcdr >> m_torque;
    dcdr >> m_pressure1;
    dcdr >> m_pressure2;
    dcdr >> m_temp;
    dcdr >> m_kp;
    dcdr >> m_ki;
    dcdr >> m_kd;
    dcdr >> m_current_ref;
    dcdr >> m_position_ref;
    dcdr >> m_torque_ref;
    dcdr >> m_current_offset;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void ECValveMsg::timestamp(
        double _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
double ECValveMsg::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
double& ECValveMsg::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member index
 * @param _index New value for member index
 */
void ECValveMsg::index(
        uint32_t _index)
{
    m_index = _index;
}

/*!
 * @brief This function returns the value of member index
 * @return Value of member index
 */
uint32_t ECValveMsg::index() const
{
    return m_index;
}

/*!
 * @brief This function returns a reference to member index
 * @return Reference to member index
 */
uint32_t& ECValveMsg::index()
{
    return m_index;
}

/*!
 * @brief This function sets a value in member id
 * @param _id New value for member id
 */
void ECValveMsg::id(
        uint32_t _id)
{
    m_id = _id;
}

/*!
 * @brief This function returns the value of member id
 * @return Value of member id
 */
uint32_t ECValveMsg::id() const
{
    return m_id;
}

/*!
 * @brief This function returns a reference to member id
 * @return Reference to member id
 */
uint32_t& ECValveMsg::id()
{
    return m_id;
}

/*!
 * @brief This function sets a value in member encoderPos
 * @param _encoderPos New value for member encoderPos
 */
void ECValveMsg::encoderPos(
        double _encoderPos)
{
    m_encoderPos = _encoderPos;
}

/*!
 * @brief This function returns the value of member encoderPos
 * @return Value of member encoderPos
 */
double ECValveMsg::encoderPos() const
{
    return m_encoderPos;
}

/*!
 * @brief This function returns a reference to member encoderPos
 * @return Reference to member encoderPos
 */
double& ECValveMsg::encoderPos()
{
    return m_encoderPos;
}

/*!
 * @brief This function sets a value in member torque
 * @param _torque New value for member torque
 */
void ECValveMsg::torque(
        double _torque)
{
    m_torque = _torque;
}

/*!
 * @brief This function returns the value of member torque
 * @return Value of member torque
 */
double ECValveMsg::torque() const
{
    return m_torque;
}

/*!
 * @brief This function returns a reference to member torque
 * @return Reference to member torque
 */
double& ECValveMsg::torque()
{
    return m_torque;
}

/*!
 * @brief This function sets a value in member pressure1
 * @param _pressure1 New value for member pressure1
 */
void ECValveMsg::pressure1(
        double _pressure1)
{
    m_pressure1 = _pressure1;
}

/*!
 * @brief This function returns the value of member pressure1
 * @return Value of member pressure1
 */
double ECValveMsg::pressure1() const
{
    return m_pressure1;
}

/*!
 * @brief This function returns a reference to member pressure1
 * @return Reference to member pressure1
 */
double& ECValveMsg::pressure1()
{
    return m_pressure1;
}

/*!
 * @brief This function sets a value in member pressure2
 * @param _pressure2 New value for member pressure2
 */
void ECValveMsg::pressure2(
        double _pressure2)
{
    m_pressure2 = _pressure2;
}

/*!
 * @brief This function returns the value of member pressure2
 * @return Value of member pressure2
 */
double ECValveMsg::pressure2() const
{
    return m_pressure2;
}

/*!
 * @brief This function returns a reference to member pressure2
 * @return Reference to member pressure2
 */
double& ECValveMsg::pressure2()
{
    return m_pressure2;
}

/*!
 * @brief This function sets a value in member temp
 * @param _temp New value for member temp
 */
void ECValveMsg::temp(
        double _temp)
{
    m_temp = _temp;
}

/*!
 * @brief This function returns the value of member temp
 * @return Value of member temp
 */
double ECValveMsg::temp() const
{
    return m_temp;
}

/*!
 * @brief This function returns a reference to member temp
 * @return Reference to member temp
 */
double& ECValveMsg::temp()
{
    return m_temp;
}

/*!
 * @brief This function sets a value in member kp
 * @param _kp New value for member kp
 */
void ECValveMsg::kp(
        double _kp)
{
    m_kp = _kp;
}

/*!
 * @brief This function returns the value of member kp
 * @return Value of member kp
 */
double ECValveMsg::kp() const
{
    return m_kp;
}

/*!
 * @brief This function returns a reference to member kp
 * @return Reference to member kp
 */
double& ECValveMsg::kp()
{
    return m_kp;
}

/*!
 * @brief This function sets a value in member ki
 * @param _ki New value for member ki
 */
void ECValveMsg::ki(
        double _ki)
{
    m_ki = _ki;
}

/*!
 * @brief This function returns the value of member ki
 * @return Value of member ki
 */
double ECValveMsg::ki() const
{
    return m_ki;
}

/*!
 * @brief This function returns a reference to member ki
 * @return Reference to member ki
 */
double& ECValveMsg::ki()
{
    return m_ki;
}

/*!
 * @brief This function sets a value in member kd
 * @param _kd New value for member kd
 */
void ECValveMsg::kd(
        double _kd)
{
    m_kd = _kd;
}

/*!
 * @brief This function returns the value of member kd
 * @return Value of member kd
 */
double ECValveMsg::kd() const
{
    return m_kd;
}

/*!
 * @brief This function returns a reference to member kd
 * @return Reference to member kd
 */
double& ECValveMsg::kd()
{
    return m_kd;
}

/*!
 * @brief This function sets a value in member current_ref
 * @param _current_ref New value for member current_ref
 */
void ECValveMsg::current_ref(
        double _current_ref)
{
    m_current_ref = _current_ref;
}

/*!
 * @brief This function returns the value of member current_ref
 * @return Value of member current_ref
 */
double ECValveMsg::current_ref() const
{
    return m_current_ref;
}

/*!
 * @brief This function returns a reference to member current_ref
 * @return Reference to member current_ref
 */
double& ECValveMsg::current_ref()
{
    return m_current_ref;
}

/*!
 * @brief This function sets a value in member position_ref
 * @param _position_ref New value for member position_ref
 */
void ECValveMsg::position_ref(
        double _position_ref)
{
    m_position_ref = _position_ref;
}

/*!
 * @brief This function returns the value of member position_ref
 * @return Value of member position_ref
 */
double ECValveMsg::position_ref() const
{
    return m_position_ref;
}

/*!
 * @brief This function returns a reference to member position_ref
 * @return Reference to member position_ref
 */
double& ECValveMsg::position_ref()
{
    return m_position_ref;
}

/*!
 * @brief This function sets a value in member torque_ref
 * @param _torque_ref New value for member torque_ref
 */
void ECValveMsg::torque_ref(
        double _torque_ref)
{
    m_torque_ref = _torque_ref;
}

/*!
 * @brief This function returns the value of member torque_ref
 * @return Value of member torque_ref
 */
double ECValveMsg::torque_ref() const
{
    return m_torque_ref;
}

/*!
 * @brief This function returns a reference to member torque_ref
 * @return Reference to member torque_ref
 */
double& ECValveMsg::torque_ref()
{
    return m_torque_ref;
}

/*!
 * @brief This function sets a value in member current_offset
 * @param _current_offset New value for member current_offset
 */
void ECValveMsg::current_offset(
        double _current_offset)
{
    m_current_offset = _current_offset;
}

/*!
 * @brief This function returns the value of member current_offset
 * @return Value of member current_offset
 */
double ECValveMsg::current_offset() const
{
    return m_current_offset;
}

/*!
 * @brief This function returns a reference to member current_offset
 * @return Reference to member current_offset
 */
double& ECValveMsg::current_offset()
{
    return m_current_offset;
}



size_t ECValveMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ECValveMsg_max_key_cdr_typesize;
}

bool ECValveMsg::isKeyDefined()
{
    return false;
}

void ECValveMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

