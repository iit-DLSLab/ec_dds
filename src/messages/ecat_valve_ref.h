// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ecat_valve_ref.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ECAT_VALVE_REF_H_
#define _FAST_DDS_GENERATED_ECAT_VALVE_REF_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ECAT_VALVE_REF_SOURCE)
#define ECAT_VALVE_REF_DllAPI __declspec( dllexport )
#else
#define ECAT_VALVE_REF_DllAPI __declspec( dllimport )
#endif // ECAT_VALVE_REF_SOURCE
#else
#define ECAT_VALVE_REF_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ECAT_VALVE_REF_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure ECValveRefMsg defined by the user in the IDL file.
 * @ingroup ecat_valve_ref
 */
class ECValveRefMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport ECValveRefMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~ECValveRefMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object ECValveRefMsg that will be copied.
     */
    eProsima_user_DllExport ECValveRefMsg(
            const ECValveRefMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object ECValveRefMsg that will be copied.
     */
    eProsima_user_DllExport ECValveRefMsg(
            ECValveRefMsg&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object ECValveRefMsg that will be copied.
     */
    eProsima_user_DllExport ECValveRefMsg& operator =(
            const ECValveRefMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object ECValveRefMsg that will be copied.
     */
    eProsima_user_DllExport ECValveRefMsg& operator =(
            ECValveRefMsg&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x ECValveRefMsg object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const ECValveRefMsg& x) const;

    /*!
     * @brief Comparison operator.
     * @param x ECValveRefMsg object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const ECValveRefMsg& x) const;

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            double _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport double timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport double& timestamp();

    /*!
     * @brief This function sets a value in member kp_force
     * @param _kp_force New value for member kp_force
     */
    eProsima_user_DllExport void kp_force(
            double _kp_force);

    /*!
     * @brief This function returns the value of member kp_force
     * @return Value of member kp_force
     */
    eProsima_user_DllExport double kp_force() const;

    /*!
     * @brief This function returns a reference to member kp_force
     * @return Reference to member kp_force
     */
    eProsima_user_DllExport double& kp_force();

    /*!
     * @brief This function sets a value in member ki_force
     * @param _ki_force New value for member ki_force
     */
    eProsima_user_DllExport void ki_force(
            double _ki_force);

    /*!
     * @brief This function returns the value of member ki_force
     * @return Value of member ki_force
     */
    eProsima_user_DllExport double ki_force() const;

    /*!
     * @brief This function returns a reference to member ki_force
     * @return Reference to member ki_force
     */
    eProsima_user_DllExport double& ki_force();

    /*!
     * @brief This function sets a value in member kd_force
     * @param _kd_force New value for member kd_force
     */
    eProsima_user_DllExport void kd_force(
            double _kd_force);

    /*!
     * @brief This function returns the value of member kd_force
     * @return Value of member kd_force
     */
    eProsima_user_DllExport double kd_force() const;

    /*!
     * @brief This function returns a reference to member kd_force
     * @return Reference to member kd_force
     */
    eProsima_user_DllExport double& kd_force();

    /*!
     * @brief This function sets a value in member kp_position
     * @param _kp_position New value for member kp_position
     */
    eProsima_user_DllExport void kp_position(
            double _kp_position);

    /*!
     * @brief This function returns the value of member kp_position
     * @return Value of member kp_position
     */
    eProsima_user_DllExport double kp_position() const;

    /*!
     * @brief This function returns a reference to member kp_position
     * @return Reference to member kp_position
     */
    eProsima_user_DllExport double& kp_position();

    /*!
     * @brief This function sets a value in member ki_position
     * @param _ki_position New value for member ki_position
     */
    eProsima_user_DllExport void ki_position(
            double _ki_position);

    /*!
     * @brief This function returns the value of member ki_position
     * @return Value of member ki_position
     */
    eProsima_user_DllExport double ki_position() const;

    /*!
     * @brief This function returns a reference to member ki_position
     * @return Reference to member ki_position
     */
    eProsima_user_DllExport double& ki_position();

    /*!
     * @brief This function sets a value in member kd_position
     * @param _kd_position New value for member kd_position
     */
    eProsima_user_DllExport void kd_position(
            double _kd_position);

    /*!
     * @brief This function returns the value of member kd_position
     * @return Value of member kd_position
     */
    eProsima_user_DllExport double kd_position() const;

    /*!
     * @brief This function returns a reference to member kd_position
     * @return Reference to member kd_position
     */
    eProsima_user_DllExport double& kd_position();

    /*!
     * @brief This function sets a value in member current_ref
     * @param _current_ref New value for member current_ref
     */
    eProsima_user_DllExport void current_ref(
            double _current_ref);

    /*!
     * @brief This function returns the value of member current_ref
     * @return Value of member current_ref
     */
    eProsima_user_DllExport double current_ref() const;

    /*!
     * @brief This function returns a reference to member current_ref
     * @return Reference to member current_ref
     */
    eProsima_user_DllExport double& current_ref();

    /*!
     * @brief This function sets a value in member position_ref
     * @param _position_ref New value for member position_ref
     */
    eProsima_user_DllExport void position_ref(
            double _position_ref);

    /*!
     * @brief This function returns the value of member position_ref
     * @return Value of member position_ref
     */
    eProsima_user_DllExport double position_ref() const;

    /*!
     * @brief This function returns a reference to member position_ref
     * @return Reference to member position_ref
     */
    eProsima_user_DllExport double& position_ref();

    /*!
     * @brief This function sets a value in member torque_ref
     * @param _torque_ref New value for member torque_ref
     */
    eProsima_user_DllExport void torque_ref(
            double _torque_ref);

    /*!
     * @brief This function returns the value of member torque_ref
     * @return Value of member torque_ref
     */
    eProsima_user_DllExport double torque_ref() const;

    /*!
     * @brief This function returns a reference to member torque_ref
     * @return Reference to member torque_ref
     */
    eProsima_user_DllExport double& torque_ref();

    /*!
     * @brief This function sets a value in member current_offset
     * @param _current_offset New value for member current_offset
     */
    eProsima_user_DllExport void current_offset(
            double _current_offset);

    /*!
     * @brief This function returns the value of member current_offset
     * @return Value of member current_offset
     */
    eProsima_user_DllExport double current_offset() const;

    /*!
     * @brief This function returns a reference to member current_offset
     * @return Reference to member current_offset
     */
    eProsima_user_DllExport double& current_offset();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const ECValveRefMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_timestamp;
    double m_kp_force;
    double m_ki_force;
    double m_kd_force;
    double m_kp_position;
    double m_ki_position;
    double m_kd_position;
    double m_current_ref;
    double m_position_ref;
    double m_torque_ref;
    double m_current_offset;

};

#endif // _FAST_DDS_GENERATED_ECAT_VALVE_REF_H_

