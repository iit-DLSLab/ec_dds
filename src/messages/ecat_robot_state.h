// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ecat_robot_state.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ECAT_ROBOT_STATE_H_
#define _FAST_DDS_GENERATED_ECAT_ROBOT_STATE_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ECAT_ROBOT_STATE_SOURCE)
#define ECAT_ROBOT_STATE_DllAPI __declspec( dllexport )
#else
#define ECAT_ROBOT_STATE_DllAPI __declspec( dllimport )
#endif // ECAT_ROBOT_STATE_SOURCE
#else
#define ECAT_ROBOT_STATE_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ECAT_ROBOT_STATE_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure EcatRobotStateMsg defined by the user in the IDL file.
 * @ingroup ecat_robot_state
 */
class EcatRobotStateMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport EcatRobotStateMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~EcatRobotStateMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object EcatRobotStateMsg that will be copied.
     */
    eProsima_user_DllExport EcatRobotStateMsg(
            const EcatRobotStateMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object EcatRobotStateMsg that will be copied.
     */
    eProsima_user_DllExport EcatRobotStateMsg(
            EcatRobotStateMsg&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object EcatRobotStateMsg that will be copied.
     */
    eProsima_user_DllExport EcatRobotStateMsg& operator =(
            const EcatRobotStateMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object EcatRobotStateMsg that will be copied.
     */
    eProsima_user_DllExport EcatRobotStateMsg& operator =(
            EcatRobotStateMsg&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x EcatRobotStateMsg object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const EcatRobotStateMsg& x) const;

    /*!
     * @brief Comparison operator.
     * @param x EcatRobotStateMsg object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const EcatRobotStateMsg& x) const;

    /*!
     * @brief This function copies the value in member frame_id
     * @param _frame_id New value to be copied in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            const std::string& _frame_id);

    /*!
     * @brief This function moves the value in member frame_id
     * @param _frame_id New value to be moved in member frame_id
     */
    eProsima_user_DllExport void frame_id(
            std::string&& _frame_id);

    /*!
     * @brief This function returns a constant reference to member frame_id
     * @return Constant reference to member frame_id
     */
    eProsima_user_DllExport const std::string& frame_id() const;

    /*!
     * @brief This function returns a reference to member frame_id
     * @return Reference to member frame_id
     */
    eProsima_user_DllExport std::string& frame_id();
    /*!
     * @brief This function sets a value in member sequence_id
     * @param _sequence_id New value for member sequence_id
     */
    eProsima_user_DllExport void sequence_id(
            uint32_t _sequence_id);

    /*!
     * @brief This function returns the value of member sequence_id
     * @return Value of member sequence_id
     */
    eProsima_user_DllExport uint32_t sequence_id() const;

    /*!
     * @brief This function returns a reference to member sequence_id
     * @return Reference to member sequence_id
     */
    eProsima_user_DllExport uint32_t& sequence_id();

    /*!
     * @brief This function sets a value in member timestamp
     * @param _timestamp New value for member timestamp
     */
    eProsima_user_DllExport void timestamp(
            double _timestamp);

    /*!
     * @brief This function returns the value of member timestamp
     * @return Value of member timestamp
     */
    eProsima_user_DllExport double timestamp() const;

    /*!
     * @brief This function returns a reference to member timestamp
     * @return Reference to member timestamp
     */
    eProsima_user_DllExport double& timestamp();

    /*!
     * @brief This function copies the value in member robot_name
     * @param _robot_name New value to be copied in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            const std::string& _robot_name);

    /*!
     * @brief This function moves the value in member robot_name
     * @param _robot_name New value to be moved in member robot_name
     */
    eProsima_user_DllExport void robot_name(
            std::string&& _robot_name);

    /*!
     * @brief This function returns a constant reference to member robot_name
     * @return Constant reference to member robot_name
     */
    eProsima_user_DllExport const std::string& robot_name() const;

    /*!
     * @brief This function returns a reference to member robot_name
     * @return Reference to member robot_name
     */
    eProsima_user_DllExport std::string& robot_name();
    /*!
     * @brief This function copies the value in member joints_name
     * @param _joints_name New value to be copied in member joints_name
     */
    eProsima_user_DllExport void joints_name(
            const std::array<std::string, 12>& _joints_name);

    /*!
     * @brief This function moves the value in member joints_name
     * @param _joints_name New value to be moved in member joints_name
     */
    eProsima_user_DllExport void joints_name(
            std::array<std::string, 12>&& _joints_name);

    /*!
     * @brief This function returns a constant reference to member joints_name
     * @return Constant reference to member joints_name
     */
    eProsima_user_DllExport const std::array<std::string, 12>& joints_name() const;

    /*!
     * @brief This function returns a reference to member joints_name
     * @return Reference to member joints_name
     */
    eProsima_user_DllExport std::array<std::string, 12>& joints_name();
    /*!
     * @brief This function copies the value in member joints_temperature
     * @param _joints_temperature New value to be copied in member joints_temperature
     */
    eProsima_user_DllExport void joints_temperature(
            const std::array<double, 12>& _joints_temperature);

    /*!
     * @brief This function moves the value in member joints_temperature
     * @param _joints_temperature New value to be moved in member joints_temperature
     */
    eProsima_user_DllExport void joints_temperature(
            std::array<double, 12>&& _joints_temperature);

    /*!
     * @brief This function returns a constant reference to member joints_temperature
     * @return Constant reference to member joints_temperature
     */
    eProsima_user_DllExport const std::array<double, 12>& joints_temperature() const;

    /*!
     * @brief This function returns a reference to member joints_temperature
     * @return Reference to member joints_temperature
     */
    eProsima_user_DllExport std::array<double, 12>& joints_temperature();
    /*!
     * @brief This function copies the value in member joints_position
     * @param _joints_position New value to be copied in member joints_position
     */
    eProsima_user_DllExport void joints_position(
            const std::array<double, 12>& _joints_position);

    /*!
     * @brief This function moves the value in member joints_position
     * @param _joints_position New value to be moved in member joints_position
     */
    eProsima_user_DllExport void joints_position(
            std::array<double, 12>&& _joints_position);

    /*!
     * @brief This function returns a constant reference to member joints_position
     * @return Constant reference to member joints_position
     */
    eProsima_user_DllExport const std::array<double, 12>& joints_position() const;

    /*!
     * @brief This function returns a reference to member joints_position
     * @return Reference to member joints_position
     */
    eProsima_user_DllExport std::array<double, 12>& joints_position();
    /*!
     * @brief This function copies the value in member joints_velocity
     * @param _joints_velocity New value to be copied in member joints_velocity
     */
    eProsima_user_DllExport void joints_velocity(
            const std::array<double, 12>& _joints_velocity);

    /*!
     * @brief This function moves the value in member joints_velocity
     * @param _joints_velocity New value to be moved in member joints_velocity
     */
    eProsima_user_DllExport void joints_velocity(
            std::array<double, 12>&& _joints_velocity);

    /*!
     * @brief This function returns a constant reference to member joints_velocity
     * @return Constant reference to member joints_velocity
     */
    eProsima_user_DllExport const std::array<double, 12>& joints_velocity() const;

    /*!
     * @brief This function returns a reference to member joints_velocity
     * @return Reference to member joints_velocity
     */
    eProsima_user_DllExport std::array<double, 12>& joints_velocity();
    /*!
     * @brief This function copies the value in member joints_acceleration
     * @param _joints_acceleration New value to be copied in member joints_acceleration
     */
    eProsima_user_DllExport void joints_acceleration(
            const std::array<double, 12>& _joints_acceleration);

    /*!
     * @brief This function moves the value in member joints_acceleration
     * @param _joints_acceleration New value to be moved in member joints_acceleration
     */
    eProsima_user_DllExport void joints_acceleration(
            std::array<double, 12>&& _joints_acceleration);

    /*!
     * @brief This function returns a constant reference to member joints_acceleration
     * @return Constant reference to member joints_acceleration
     */
    eProsima_user_DllExport const std::array<double, 12>& joints_acceleration() const;

    /*!
     * @brief This function returns a reference to member joints_acceleration
     * @return Reference to member joints_acceleration
     */
    eProsima_user_DllExport std::array<double, 12>& joints_acceleration();
    /*!
     * @brief This function copies the value in member joints_torques
     * @param _joints_torques New value to be copied in member joints_torques
     */
    eProsima_user_DllExport void joints_torques(
            const std::array<double, 12>& _joints_torques);

    /*!
     * @brief This function moves the value in member joints_torques
     * @param _joints_torques New value to be moved in member joints_torques
     */
    eProsima_user_DllExport void joints_torques(
            std::array<double, 12>&& _joints_torques);

    /*!
     * @brief This function returns a constant reference to member joints_torques
     * @return Constant reference to member joints_torques
     */
    eProsima_user_DllExport const std::array<double, 12>& joints_torques() const;

    /*!
     * @brief This function returns a reference to member joints_torques
     * @return Reference to member joints_torques
     */
    eProsima_user_DllExport std::array<double, 12>& joints_torques();
    /*!
     * @brief This function copies the value in member feet_contact
     * @param _feet_contact New value to be copied in member feet_contact
     */
    eProsima_user_DllExport void feet_contact(
            const std::array<double, 4>& _feet_contact);

    /*!
     * @brief This function moves the value in member feet_contact
     * @param _feet_contact New value to be moved in member feet_contact
     */
    eProsima_user_DllExport void feet_contact(
            std::array<double, 4>&& _feet_contact);

    /*!
     * @brief This function returns a constant reference to member feet_contact
     * @return Constant reference to member feet_contact
     */
    eProsima_user_DllExport const std::array<double, 4>& feet_contact() const;

    /*!
     * @brief This function returns a reference to member feet_contact
     * @return Reference to member feet_contact
     */
    eProsima_user_DllExport std::array<double, 4>& feet_contact();
    /*!
     * @brief This function copies the value in member feet_position
     * @param _feet_position New value to be copied in member feet_position
     */
    eProsima_user_DllExport void feet_position(
            const std::array<double, 12>& _feet_position);

    /*!
     * @brief This function moves the value in member feet_position
     * @param _feet_position New value to be moved in member feet_position
     */
    eProsima_user_DllExport void feet_position(
            std::array<double, 12>&& _feet_position);

    /*!
     * @brief This function returns a constant reference to member feet_position
     * @return Constant reference to member feet_position
     */
    eProsima_user_DllExport const std::array<double, 12>& feet_position() const;

    /*!
     * @brief This function returns a reference to member feet_position
     * @return Reference to member feet_position
     */
    eProsima_user_DllExport std::array<double, 12>& feet_position();
    /*!
     * @brief This function copies the value in member current_ref
     * @param _current_ref New value to be copied in member current_ref
     */
    eProsima_user_DllExport void current_ref(
            const std::array<double, 12>& _current_ref);

    /*!
     * @brief This function moves the value in member current_ref
     * @param _current_ref New value to be moved in member current_ref
     */
    eProsima_user_DllExport void current_ref(
            std::array<double, 12>&& _current_ref);

    /*!
     * @brief This function returns a constant reference to member current_ref
     * @return Constant reference to member current_ref
     */
    eProsima_user_DllExport const std::array<double, 12>& current_ref() const;

    /*!
     * @brief This function returns a reference to member current_ref
     * @return Reference to member current_ref
     */
    eProsima_user_DllExport std::array<double, 12>& current_ref();
    /*!
     * @brief This function copies the value in member position_ref
     * @param _position_ref New value to be copied in member position_ref
     */
    eProsima_user_DllExport void position_ref(
            const std::array<double, 12>& _position_ref);

    /*!
     * @brief This function moves the value in member position_ref
     * @param _position_ref New value to be moved in member position_ref
     */
    eProsima_user_DllExport void position_ref(
            std::array<double, 12>&& _position_ref);

    /*!
     * @brief This function returns a constant reference to member position_ref
     * @return Constant reference to member position_ref
     */
    eProsima_user_DllExport const std::array<double, 12>& position_ref() const;

    /*!
     * @brief This function returns a reference to member position_ref
     * @return Reference to member position_ref
     */
    eProsima_user_DllExport std::array<double, 12>& position_ref();
    /*!
     * @brief This function copies the value in member torque_ref
     * @param _torque_ref New value to be copied in member torque_ref
     */
    eProsima_user_DllExport void torque_ref(
            const std::array<double, 12>& _torque_ref);

    /*!
     * @brief This function moves the value in member torque_ref
     * @param _torque_ref New value to be moved in member torque_ref
     */
    eProsima_user_DllExport void torque_ref(
            std::array<double, 12>&& _torque_ref);

    /*!
     * @brief This function returns a constant reference to member torque_ref
     * @return Constant reference to member torque_ref
     */
    eProsima_user_DllExport const std::array<double, 12>& torque_ref() const;

    /*!
     * @brief This function returns a reference to member torque_ref
     * @return Reference to member torque_ref
     */
    eProsima_user_DllExport std::array<double, 12>& torque_ref();
    /*!
     * @brief This function copies the value in member current_offset
     * @param _current_offset New value to be copied in member current_offset
     */
    eProsima_user_DllExport void current_offset(
            const std::array<double, 12>& _current_offset);

    /*!
     * @brief This function moves the value in member current_offset
     * @param _current_offset New value to be moved in member current_offset
     */
    eProsima_user_DllExport void current_offset(
            std::array<double, 12>&& _current_offset);

    /*!
     * @brief This function returns a constant reference to member current_offset
     * @return Constant reference to member current_offset
     */
    eProsima_user_DllExport const std::array<double, 12>& current_offset() const;

    /*!
     * @brief This function returns a reference to member current_offset
     * @return Reference to member current_offset
     */
    eProsima_user_DllExport std::array<double, 12>& current_offset();

    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const EcatRobotStateMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    std::string m_frame_id;
    uint32_t m_sequence_id;
    double m_timestamp;
    std::string m_robot_name;
    std::array<std::string, 12> m_joints_name;
    std::array<double, 12> m_joints_temperature;
    std::array<double, 12> m_joints_position;
    std::array<double, 12> m_joints_velocity;
    std::array<double, 12> m_joints_acceleration;
    std::array<double, 12> m_joints_torques;
    std::array<double, 4> m_feet_contact;
    std::array<double, 12> m_feet_position;
    std::array<double, 12> m_current_ref;
    std::array<double, 12> m_position_ref;
    std::array<double, 12> m_torque_ref;
    std::array<double, 12> m_current_offset;

};

#endif // _FAST_DDS_GENERATED_ECAT_ROBOT_STATE_H_

