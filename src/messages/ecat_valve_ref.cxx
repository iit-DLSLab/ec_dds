// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ecat_valve_ref.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "ecat_valve_ref.h"
#include "ecat_valve_refTypeObject.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define ECValveRefMsg_max_cdr_typesize 88ULL;
#define ECValveRefMsg_max_key_cdr_typesize 0ULL;

ECValveRefMsg::ECValveRefMsg()
{
    // double m_timestamp
    m_timestamp = 0.0;
    // double m_kp_force
    m_kp_force = 0.0;
    // double m_ki_force
    m_ki_force = 0.0;
    // double m_kd_force
    m_kd_force = 0.0;
    // double m_kp_position
    m_kp_position = 0.0;
    // double m_ki_position
    m_ki_position = 0.0;
    // double m_kd_position
    m_kd_position = 0.0;
    // double m_current_ref
    m_current_ref = 0.0;
    // double m_position_ref
    m_position_ref = 0.0;
    // double m_torque_ref
    m_torque_ref = 0.0;
    // double m_current_offset
    m_current_offset = 0.0;

    // Just to register all known types
    registerecat_valve_refTypes();
}

ECValveRefMsg::~ECValveRefMsg()
{











}

ECValveRefMsg::ECValveRefMsg(
        const ECValveRefMsg& x)
{
    m_timestamp = x.m_timestamp;
    m_kp_force = x.m_kp_force;
    m_ki_force = x.m_ki_force;
    m_kd_force = x.m_kd_force;
    m_kp_position = x.m_kp_position;
    m_ki_position = x.m_ki_position;
    m_kd_position = x.m_kd_position;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;
}

ECValveRefMsg::ECValveRefMsg(
        ECValveRefMsg&& x) noexcept 
{
    m_timestamp = x.m_timestamp;
    m_kp_force = x.m_kp_force;
    m_ki_force = x.m_ki_force;
    m_kd_force = x.m_kd_force;
    m_kp_position = x.m_kp_position;
    m_ki_position = x.m_ki_position;
    m_kd_position = x.m_kd_position;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;
}

ECValveRefMsg& ECValveRefMsg::operator =(
        const ECValveRefMsg& x)
{

    m_timestamp = x.m_timestamp;
    m_kp_force = x.m_kp_force;
    m_ki_force = x.m_ki_force;
    m_kd_force = x.m_kd_force;
    m_kp_position = x.m_kp_position;
    m_ki_position = x.m_ki_position;
    m_kd_position = x.m_kd_position;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;

    return *this;
}

ECValveRefMsg& ECValveRefMsg::operator =(
        ECValveRefMsg&& x) noexcept
{

    m_timestamp = x.m_timestamp;
    m_kp_force = x.m_kp_force;
    m_ki_force = x.m_ki_force;
    m_kd_force = x.m_kd_force;
    m_kp_position = x.m_kp_position;
    m_ki_position = x.m_ki_position;
    m_kd_position = x.m_kd_position;
    m_current_ref = x.m_current_ref;
    m_position_ref = x.m_position_ref;
    m_torque_ref = x.m_torque_ref;
    m_current_offset = x.m_current_offset;

    return *this;
}

bool ECValveRefMsg::operator ==(
        const ECValveRefMsg& x) const
{

    return (m_timestamp == x.m_timestamp && m_kp_force == x.m_kp_force && m_ki_force == x.m_ki_force && m_kd_force == x.m_kd_force && m_kp_position == x.m_kp_position && m_ki_position == x.m_ki_position && m_kd_position == x.m_kd_position && m_current_ref == x.m_current_ref && m_position_ref == x.m_position_ref && m_torque_ref == x.m_torque_ref && m_current_offset == x.m_current_offset);
}

bool ECValveRefMsg::operator !=(
        const ECValveRefMsg& x) const
{
    return !(*this == x);
}

size_t ECValveRefMsg::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ECValveRefMsg_max_cdr_typesize;
}

size_t ECValveRefMsg::getCdrSerializedSize(
        const ECValveRefMsg& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void ECValveRefMsg::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_timestamp;
    scdr << m_kp_force;
    scdr << m_ki_force;
    scdr << m_kd_force;
    scdr << m_kp_position;
    scdr << m_ki_position;
    scdr << m_kd_position;
    scdr << m_current_ref;
    scdr << m_position_ref;
    scdr << m_torque_ref;
    scdr << m_current_offset;

}

void ECValveRefMsg::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_timestamp;
    dcdr >> m_kp_force;
    dcdr >> m_ki_force;
    dcdr >> m_kd_force;
    dcdr >> m_kp_position;
    dcdr >> m_ki_position;
    dcdr >> m_kd_position;
    dcdr >> m_current_ref;
    dcdr >> m_position_ref;
    dcdr >> m_torque_ref;
    dcdr >> m_current_offset;
}

/*!
 * @brief This function sets a value in member timestamp
 * @param _timestamp New value for member timestamp
 */
void ECValveRefMsg::timestamp(
        double _timestamp)
{
    m_timestamp = _timestamp;
}

/*!
 * @brief This function returns the value of member timestamp
 * @return Value of member timestamp
 */
double ECValveRefMsg::timestamp() const
{
    return m_timestamp;
}

/*!
 * @brief This function returns a reference to member timestamp
 * @return Reference to member timestamp
 */
double& ECValveRefMsg::timestamp()
{
    return m_timestamp;
}

/*!
 * @brief This function sets a value in member kp_force
 * @param _kp_force New value for member kp_force
 */
void ECValveRefMsg::kp_force(
        double _kp_force)
{
    m_kp_force = _kp_force;
}

/*!
 * @brief This function returns the value of member kp_force
 * @return Value of member kp_force
 */
double ECValveRefMsg::kp_force() const
{
    return m_kp_force;
}

/*!
 * @brief This function returns a reference to member kp_force
 * @return Reference to member kp_force
 */
double& ECValveRefMsg::kp_force()
{
    return m_kp_force;
}

/*!
 * @brief This function sets a value in member ki_force
 * @param _ki_force New value for member ki_force
 */
void ECValveRefMsg::ki_force(
        double _ki_force)
{
    m_ki_force = _ki_force;
}

/*!
 * @brief This function returns the value of member ki_force
 * @return Value of member ki_force
 */
double ECValveRefMsg::ki_force() const
{
    return m_ki_force;
}

/*!
 * @brief This function returns a reference to member ki_force
 * @return Reference to member ki_force
 */
double& ECValveRefMsg::ki_force()
{
    return m_ki_force;
}

/*!
 * @brief This function sets a value in member kd_force
 * @param _kd_force New value for member kd_force
 */
void ECValveRefMsg::kd_force(
        double _kd_force)
{
    m_kd_force = _kd_force;
}

/*!
 * @brief This function returns the value of member kd_force
 * @return Value of member kd_force
 */
double ECValveRefMsg::kd_force() const
{
    return m_kd_force;
}

/*!
 * @brief This function returns a reference to member kd_force
 * @return Reference to member kd_force
 */
double& ECValveRefMsg::kd_force()
{
    return m_kd_force;
}

/*!
 * @brief This function sets a value in member kp_position
 * @param _kp_position New value for member kp_position
 */
void ECValveRefMsg::kp_position(
        double _kp_position)
{
    m_kp_position = _kp_position;
}

/*!
 * @brief This function returns the value of member kp_position
 * @return Value of member kp_position
 */
double ECValveRefMsg::kp_position() const
{
    return m_kp_position;
}

/*!
 * @brief This function returns a reference to member kp_position
 * @return Reference to member kp_position
 */
double& ECValveRefMsg::kp_position()
{
    return m_kp_position;
}

/*!
 * @brief This function sets a value in member ki_position
 * @param _ki_position New value for member ki_position
 */
void ECValveRefMsg::ki_position(
        double _ki_position)
{
    m_ki_position = _ki_position;
}

/*!
 * @brief This function returns the value of member ki_position
 * @return Value of member ki_position
 */
double ECValveRefMsg::ki_position() const
{
    return m_ki_position;
}

/*!
 * @brief This function returns a reference to member ki_position
 * @return Reference to member ki_position
 */
double& ECValveRefMsg::ki_position()
{
    return m_ki_position;
}

/*!
 * @brief This function sets a value in member kd_position
 * @param _kd_position New value for member kd_position
 */
void ECValveRefMsg::kd_position(
        double _kd_position)
{
    m_kd_position = _kd_position;
}

/*!
 * @brief This function returns the value of member kd_position
 * @return Value of member kd_position
 */
double ECValveRefMsg::kd_position() const
{
    return m_kd_position;
}

/*!
 * @brief This function returns a reference to member kd_position
 * @return Reference to member kd_position
 */
double& ECValveRefMsg::kd_position()
{
    return m_kd_position;
}

/*!
 * @brief This function sets a value in member current_ref
 * @param _current_ref New value for member current_ref
 */
void ECValveRefMsg::current_ref(
        double _current_ref)
{
    m_current_ref = _current_ref;
}

/*!
 * @brief This function returns the value of member current_ref
 * @return Value of member current_ref
 */
double ECValveRefMsg::current_ref() const
{
    return m_current_ref;
}

/*!
 * @brief This function returns a reference to member current_ref
 * @return Reference to member current_ref
 */
double& ECValveRefMsg::current_ref()
{
    return m_current_ref;
}

/*!
 * @brief This function sets a value in member position_ref
 * @param _position_ref New value for member position_ref
 */
void ECValveRefMsg::position_ref(
        double _position_ref)
{
    m_position_ref = _position_ref;
}

/*!
 * @brief This function returns the value of member position_ref
 * @return Value of member position_ref
 */
double ECValveRefMsg::position_ref() const
{
    return m_position_ref;
}

/*!
 * @brief This function returns a reference to member position_ref
 * @return Reference to member position_ref
 */
double& ECValveRefMsg::position_ref()
{
    return m_position_ref;
}

/*!
 * @brief This function sets a value in member torque_ref
 * @param _torque_ref New value for member torque_ref
 */
void ECValveRefMsg::torque_ref(
        double _torque_ref)
{
    m_torque_ref = _torque_ref;
}

/*!
 * @brief This function returns the value of member torque_ref
 * @return Value of member torque_ref
 */
double ECValveRefMsg::torque_ref() const
{
    return m_torque_ref;
}

/*!
 * @brief This function returns a reference to member torque_ref
 * @return Reference to member torque_ref
 */
double& ECValveRefMsg::torque_ref()
{
    return m_torque_ref;
}

/*!
 * @brief This function sets a value in member current_offset
 * @param _current_offset New value for member current_offset
 */
void ECValveRefMsg::current_offset(
        double _current_offset)
{
    m_current_offset = _current_offset;
}

/*!
 * @brief This function returns the value of member current_offset
 * @return Value of member current_offset
 */
double ECValveRefMsg::current_offset() const
{
    return m_current_offset;
}

/*!
 * @brief This function returns a reference to member current_offset
 * @return Reference to member current_offset
 */
double& ECValveRefMsg::current_offset()
{
    return m_current_offset;
}



size_t ECValveRefMsg::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return ECValveRefMsg_max_key_cdr_typesize;
}

bool ECValveRefMsg::isKeyDefined()
{
    return false;
}

void ECValveRefMsg::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}

