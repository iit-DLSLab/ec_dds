// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file ecat_robot_net_stat.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _FAST_DDS_GENERATED_ECAT_ROBOT_NET_STAT_H_
#define _FAST_DDS_GENERATED_ECAT_ROBOT_NET_STAT_H_


#include <fastrtps/utils/fixed_size_string.hpp>

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(ECAT_ROBOT_NET_STAT_SOURCE)
#define ECAT_ROBOT_NET_STAT_DllAPI __declspec( dllexport )
#else
#define ECAT_ROBOT_NET_STAT_DllAPI __declspec( dllimport )
#endif // ECAT_ROBOT_NET_STAT_SOURCE
#else
#define ECAT_ROBOT_NET_STAT_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define ECAT_ROBOT_NET_STAT_DllAPI
#endif // _WIN32

namespace eprosima {
namespace fastcdr {
class Cdr;
} // namespace fastcdr
} // namespace eprosima


/*!
 * @brief This class represents the structure NetStatMsg defined by the user in the IDL file.
 * @ingroup ecat_robot_net_stat
 */
class NetStatMsg
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport NetStatMsg();

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~NetStatMsg();

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object NetStatMsg that will be copied.
     */
    eProsima_user_DllExport NetStatMsg(
            const NetStatMsg& x);

    /*!
     * @brief Move constructor.
     * @param x Reference to the object NetStatMsg that will be copied.
     */
    eProsima_user_DllExport NetStatMsg(
            NetStatMsg&& x) noexcept;

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object NetStatMsg that will be copied.
     */
    eProsima_user_DllExport NetStatMsg& operator =(
            const NetStatMsg& x);

    /*!
     * @brief Move assignment.
     * @param x Reference to the object NetStatMsg that will be copied.
     */
    eProsima_user_DllExport NetStatMsg& operator =(
            NetStatMsg&& x) noexcept;

    /*!
     * @brief Comparison operator.
     * @param x NetStatMsg object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const NetStatMsg& x) const;

    /*!
     * @brief Comparison operator.
     * @param x NetStatMsg object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const NetStatMsg& x) const;

    /*!
     * @brief This function sets a value in member delta_timestamp
     * @param _delta_timestamp New value for member delta_timestamp
     */
    eProsima_user_DllExport void delta_timestamp(
            double _delta_timestamp);

    /*!
     * @brief This function returns the value of member delta_timestamp
     * @return Value of member delta_timestamp
     */
    eProsima_user_DllExport double delta_timestamp() const;

    /*!
     * @brief This function returns a reference to member delta_timestamp
     * @return Reference to member delta_timestamp
     */
    eProsima_user_DllExport double& delta_timestamp();

    /*!
     * @brief This function sets a value in member missed_packages_tot
     * @param _missed_packages_tot New value for member missed_packages_tot
     */
    eProsima_user_DllExport void missed_packages_tot(
            uint32_t _missed_packages_tot);

    /*!
     * @brief This function returns the value of member missed_packages_tot
     * @return Value of member missed_packages_tot
     */
    eProsima_user_DllExport uint32_t missed_packages_tot() const;

    /*!
     * @brief This function returns a reference to member missed_packages_tot
     * @return Reference to member missed_packages_tot
     */
    eProsima_user_DllExport uint32_t& missed_packages_tot();

    /*!
     * @brief This function sets a value in member missed_packages_curr
     * @param _missed_packages_curr New value for member missed_packages_curr
     */
    eProsima_user_DllExport void missed_packages_curr(
            uint32_t _missed_packages_curr);

    /*!
     * @brief This function returns the value of member missed_packages_curr
     * @return Value of member missed_packages_curr
     */
    eProsima_user_DllExport uint32_t missed_packages_curr() const;

    /*!
     * @brief This function returns a reference to member missed_packages_curr
     * @return Reference to member missed_packages_curr
     */
    eProsima_user_DllExport uint32_t& missed_packages_curr();

    /*!
     * @brief This function sets a value in member sequence_id_curr
     * @param _sequence_id_curr New value for member sequence_id_curr
     */
    eProsima_user_DllExport void sequence_id_curr(
            uint32_t _sequence_id_curr);

    /*!
     * @brief This function returns the value of member sequence_id_curr
     * @return Value of member sequence_id_curr
     */
    eProsima_user_DllExport uint32_t sequence_id_curr() const;

    /*!
     * @brief This function returns a reference to member sequence_id_curr
     * @return Reference to member sequence_id_curr
     */
    eProsima_user_DllExport uint32_t& sequence_id_curr();

    /*!
     * @brief This function sets a value in member sequence_id_prec
     * @param _sequence_id_prec New value for member sequence_id_prec
     */
    eProsima_user_DllExport void sequence_id_prec(
            uint32_t _sequence_id_prec);

    /*!
     * @brief This function returns the value of member sequence_id_prec
     * @return Value of member sequence_id_prec
     */
    eProsima_user_DllExport uint32_t sequence_id_prec() const;

    /*!
     * @brief This function returns a reference to member sequence_id_prec
     * @return Reference to member sequence_id_prec
     */
    eProsima_user_DllExport uint32_t& sequence_id_prec();


    /*!
    * @brief This function returns the maximum serialized size of an object
    * depending on the buffer alignment.
    * @param current_alignment Buffer alignment.
    * @return Maximum serialized size.
    */
    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function returns the serialized size of a data depending on the buffer alignment.
     * @param data Data which is calculated its serialized size.
     * @param current_alignment Buffer alignment.
     * @return Serialized size.
     */
    eProsima_user_DllExport static size_t getCdrSerializedSize(
            const NetStatMsg& data,
            size_t current_alignment = 0);


    /*!
     * @brief This function serializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serialize(
            eprosima::fastcdr::Cdr& cdr) const;

    /*!
     * @brief This function deserializes an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void deserialize(
            eprosima::fastcdr::Cdr& cdr);



    /*!
     * @brief This function returns the maximum serialized size of the Key of an object
     * depending on the buffer alignment.
     * @param current_alignment Buffer alignment.
     * @return Maximum serialized size.
     */
    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(
            size_t current_alignment = 0);

    /*!
     * @brief This function tells you if the Key has been defined for this type
     */
    eProsima_user_DllExport static bool isKeyDefined();

    /*!
     * @brief This function serializes the key members of an object using CDR serialization.
     * @param cdr CDR serialization object.
     */
    eProsima_user_DllExport void serializeKey(
            eprosima::fastcdr::Cdr& cdr) const;

private:

    double m_delta_timestamp;
    uint32_t m_missed_packages_tot;
    uint32_t m_missed_packages_curr;
    uint32_t m_sequence_id_curr;
    uint32_t m_sequence_id_prec;

};

#endif // _FAST_DDS_GENERATED_ECAT_ROBOT_NET_STAT_H_

